datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

generator client {
  provider = "prisma-client-js"
}



model User {
  id        Int      @id @default(autoincrement())

  cart Cart?
  order Order[]
  VarificationCode VarificationCode?

  fullName  String?
  email     String   @unique
  password  String
  role      UserRole @default(USER)
  verified  DateTime 
  
  provider  String?
  providerId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

enum UserRole {
  USER
  ADMIN
}

model Category {
  id        Int      @id @default(autoincrement())
  name     String  @unique

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt  
}

model Product {
  id        Int      @id @default(autoincrement()) 

  name      String  
  imageUrl  String

  ingredients Ingredient[]  
  items ProductItem[]

  category Category  @relation(fields: [categoryId], references: [id]) 
  categoryId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt   
}
// вариант пиццы например
model ProductItem {
  id       Int      @id @default(autoincrement())
  
  price    Float
  size     Int?
  pizzaType Int?

  cartItems CartItem[]

  product Product  @relation(fields: [productId], references: [id]) 
  productId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
// вариация (у одного продукта много вариантов (ProductItem), но у варианта только один продукт)

model Ingredient {
  id       Int      @id @default(autoincrement())

  name     String  
  price    Float 
  imageUrl String

  product Product[]  
  cartItems CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt  
}

model Cart {
  id        Int      @id @default(autoincrement())

  user      User?  @relation(fields: [userId], references: [id]) 
  userId    Int? @unique

  items     CartItem[]

  token String

  totalAmount Float @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt  
}

model CartItem {
  id       Int      @id @default(autoincrement())

  productItem ProductItem  @relation(fields: [productItemId], references: [id]) 
  productItemId Int

  cart      Cart?  @relation(fields: [cartId], references: [id]) 
  cartId    Int?

  quantity   Int @default(1)

  ingredients Ingredient[]
  // доп ингридиенты *основные ингридиенты уже есть в продукте)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt   
}

model Order {
  id       Int      @id @default(autoincrement())

  user User? @relation(fields: [userId], references: [id])
  userId Int?
  
  token String

  totalAmount Int 
  status OrderStatus @default(PENDING)
  paymentId String?

  items Json 

  fullName String
  email String
  phone String
  address String
  date String?
  time String?
  comment String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}

enum OrderStatus {
  PENDING 
  SUCCEEDED 
  CANCELLED
  }


model VarificationCode {
  id       Int      @id @default(autoincrement())

  user User         @relation(fields: [userId], references: [id])
  userId Int        @unique

  code String

  createdAt DateTime @default(now())

  @@unique([userId, code])
  // код уникальный для конкретного пользователя (два одинаковых кода на 1 пользователя не допускается)
}


// npx prisma db push